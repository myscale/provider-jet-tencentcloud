//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthOptionsObservation) DeepCopyInto(out *AuthOptionsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthOptionsObservation.
func (in *AuthOptionsObservation) DeepCopy() *AuthOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(AuthOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthOptionsParameters) DeepCopyInto(out *AuthOptionsParameters) {
	*out = *in
	if in.AutoCreateDiscoveryAnonymousAuth != nil {
		in, out := &in.AutoCreateDiscoveryAnonymousAuth, &out.AutoCreateDiscoveryAnonymousAuth
		*out = new(bool)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.JwksURI != nil {
		in, out := &in.JwksURI, &out.JwksURI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthOptionsParameters.
func (in *AuthOptionsParameters) DeepCopy() *AuthOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(AuthOptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Cluster) DeepCopyInto(out *Cluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Cluster.
func (in *Cluster) DeepCopy() *Cluster {
	if in == nil {
		return nil
	}
	out := new(Cluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Cluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAuditObservation) DeepCopyInto(out *ClusterAuditObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAuditObservation.
func (in *ClusterAuditObservation) DeepCopy() *ClusterAuditObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterAuditObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAuditParameters) DeepCopyInto(out *ClusterAuditParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.LogSetID != nil {
		in, out := &in.LogSetID, &out.LogSetID
		*out = new(string)
		**out = **in
	}
	if in.TopicID != nil {
		in, out := &in.TopicID, &out.TopicID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAuditParameters.
func (in *ClusterAuditParameters) DeepCopy() *ClusterAuditParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAuditParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterExtraArgsObservation) DeepCopyInto(out *ClusterExtraArgsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterExtraArgsObservation.
func (in *ClusterExtraArgsObservation) DeepCopy() *ClusterExtraArgsObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterExtraArgsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterExtraArgsParameters) DeepCopyInto(out *ClusterExtraArgsParameters) {
	*out = *in
	if in.KubeApiserver != nil {
		in, out := &in.KubeApiserver, &out.KubeApiserver
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KubeControllerManager != nil {
		in, out := &in.KubeControllerManager, &out.KubeControllerManager
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KubeScheduler != nil {
		in, out := &in.KubeScheduler, &out.KubeScheduler
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterExtraArgsParameters.
func (in *ClusterExtraArgsParameters) DeepCopy() *ClusterExtraArgsParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterExtraArgsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterList) DeepCopyInto(out *ClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Cluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterList.
func (in *ClusterList) DeepCopy() *ClusterList {
	if in == nil {
		return nil
	}
	out := new(ClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterObservation) DeepCopyInto(out *ClusterObservation) {
	*out = *in
	if in.CertificationAuthority != nil {
		in, out := &in.CertificationAuthority, &out.CertificationAuthority
		*out = new(string)
		**out = **in
	}
	if in.ClusterExternalEndpoint != nil {
		in, out := &in.ClusterExternalEndpoint, &out.ClusterExternalEndpoint
		*out = new(string)
		**out = **in
	}
	if in.ClusterNodeNum != nil {
		in, out := &in.ClusterNodeNum, &out.ClusterNodeNum
		*out = new(float64)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.KubeConfigIntranet != nil {
		in, out := &in.KubeConfigIntranet, &out.KubeConfigIntranet
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PgwEndpoint != nil {
		in, out := &in.PgwEndpoint, &out.PgwEndpoint
		*out = new(string)
		**out = **in
	}
	if in.SecurityPolicy != nil {
		in, out := &in.SecurityPolicy, &out.SecurityPolicy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstancesList != nil {
		in, out := &in.WorkerInstancesList, &out.WorkerInstancesList
		*out = make([]WorkerInstancesListObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterObservation.
func (in *ClusterObservation) DeepCopy() *ClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterParameters) DeepCopyInto(out *ClusterParameters) {
	*out = *in
	if in.AcquireClusterAdminRole != nil {
		in, out := &in.AcquireClusterAdminRole, &out.AcquireClusterAdminRole
		*out = new(bool)
		**out = **in
	}
	if in.AuthOptions != nil {
		in, out := &in.AuthOptions, &out.AuthOptions
		*out = make([]AuthOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoUpgradeClusterLevel != nil {
		in, out := &in.AutoUpgradeClusterLevel, &out.AutoUpgradeClusterLevel
		*out = new(bool)
		**out = **in
	}
	if in.BasePodNum != nil {
		in, out := &in.BasePodNum, &out.BasePodNum
		*out = new(float64)
		**out = **in
	}
	if in.ClaimExpiredSeconds != nil {
		in, out := &in.ClaimExpiredSeconds, &out.ClaimExpiredSeconds
		*out = new(float64)
		**out = **in
	}
	if in.ClusterAsEnabled != nil {
		in, out := &in.ClusterAsEnabled, &out.ClusterAsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ClusterAudit != nil {
		in, out := &in.ClusterAudit, &out.ClusterAudit
		*out = make([]ClusterAuditParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterCidr != nil {
		in, out := &in.ClusterCidr, &out.ClusterCidr
		*out = new(string)
		**out = **in
	}
	if in.ClusterDeployType != nil {
		in, out := &in.ClusterDeployType, &out.ClusterDeployType
		*out = new(string)
		**out = **in
	}
	if in.ClusterDesc != nil {
		in, out := &in.ClusterDesc, &out.ClusterDesc
		*out = new(string)
		**out = **in
	}
	if in.ClusterExtraArgs != nil {
		in, out := &in.ClusterExtraArgs, &out.ClusterExtraArgs
		*out = make([]ClusterExtraArgsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterInternet != nil {
		in, out := &in.ClusterInternet, &out.ClusterInternet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterInternetSecurityGroup != nil {
		in, out := &in.ClusterInternetSecurityGroup, &out.ClusterInternetSecurityGroup
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranet != nil {
		in, out := &in.ClusterIntranet, &out.ClusterIntranet
		*out = new(bool)
		**out = **in
	}
	if in.ClusterIntranetSubnetID != nil {
		in, out := &in.ClusterIntranetSubnetID, &out.ClusterIntranetSubnetID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIntranetSubnetIdRefs != nil {
		in, out := &in.ClusterIntranetSubnetIdRefs, &out.ClusterIntranetSubnetIdRefs
		*out = new(v1.Reference)
		**out = **in
	}
	if in.ClusterIntranetSubnetIdSelector != nil {
		in, out := &in.ClusterIntranetSubnetIdSelector, &out.ClusterIntranetSubnetIdSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIpvs != nil {
		in, out := &in.ClusterIpvs, &out.ClusterIpvs
		*out = new(bool)
		**out = **in
	}
	if in.ClusterLevel != nil {
		in, out := &in.ClusterLevel, &out.ClusterLevel
		*out = new(string)
		**out = **in
	}
	if in.ClusterMaxPodNum != nil {
		in, out := &in.ClusterMaxPodNum, &out.ClusterMaxPodNum
		*out = new(float64)
		**out = **in
	}
	if in.ClusterMaxServiceNum != nil {
		in, out := &in.ClusterMaxServiceNum, &out.ClusterMaxServiceNum
		*out = new(float64)
		**out = **in
	}
	if in.ClusterName != nil {
		in, out := &in.ClusterName, &out.ClusterName
		*out = new(string)
		**out = **in
	}
	if in.ClusterOs != nil {
		in, out := &in.ClusterOs, &out.ClusterOs
		*out = new(string)
		**out = **in
	}
	if in.ClusterOsType != nil {
		in, out := &in.ClusterOsType, &out.ClusterOsType
		*out = new(string)
		**out = **in
	}
	if in.ClusterVersion != nil {
		in, out := &in.ClusterVersion, &out.ClusterVersion
		*out = new(string)
		**out = **in
	}
	if in.ContainerRuntime != nil {
		in, out := &in.ContainerRuntime, &out.ContainerRuntime
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.DockerGraphPath != nil {
		in, out := &in.DockerGraphPath, &out.DockerGraphPath
		*out = new(string)
		**out = **in
	}
	if in.EnableCustomizedPodCidr != nil {
		in, out := &in.EnableCustomizedPodCidr, &out.EnableCustomizedPodCidr
		*out = new(bool)
		**out = **in
	}
	if in.EniSubnetIds != nil {
		in, out := &in.EniSubnetIds, &out.EniSubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EventPersistence != nil {
		in, out := &in.EventPersistence, &out.EventPersistence
		*out = make([]EventPersistenceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExistInstance != nil {
		in, out := &in.ExistInstance, &out.ExistInstance
		*out = make([]ExistInstanceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtensionAddon != nil {
		in, out := &in.ExtensionAddon, &out.ExtensionAddon
		*out = make([]ExtensionAddonParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtraArgs != nil {
		in, out := &in.ExtraArgs, &out.ExtraArgs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GlobeDesiredPodNum != nil {
		in, out := &in.GlobeDesiredPodNum, &out.GlobeDesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.IgnoreClusterCidrConflict != nil {
		in, out := &in.IgnoreClusterCidrConflict, &out.IgnoreClusterCidrConflict
		*out = new(bool)
		**out = **in
	}
	if in.IsNonStaticIPMode != nil {
		in, out := &in.IsNonStaticIPMode, &out.IsNonStaticIPMode
		*out = new(bool)
		**out = **in
	}
	if in.KubeProxyMode != nil {
		in, out := &in.KubeProxyMode, &out.KubeProxyMode
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LogAgent != nil {
		in, out := &in.LogAgent, &out.LogAgent
		*out = make([]LogAgentParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ManagedClusterInternetSecurityPolicies != nil {
		in, out := &in.ManagedClusterInternetSecurityPolicies, &out.ManagedClusterInternetSecurityPolicies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterConfig != nil {
		in, out := &in.MasterConfig, &out.MasterConfig
		*out = make([]MasterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.NetworkType != nil {
		in, out := &in.NetworkType, &out.NetworkType
		*out = new(string)
		**out = **in
	}
	if in.NodeNameType != nil {
		in, out := &in.NodeNameType, &out.NodeNameType
		*out = new(string)
		**out = **in
	}
	if in.NodePoolGlobalConfig != nil {
		in, out := &in.NodePoolGlobalConfig, &out.NodePoolGlobalConfig
		*out = make([]NodePoolGlobalConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.RuntimeVersion != nil {
		in, out := &in.RuntimeVersion, &out.RuntimeVersion
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(float64)
		**out = **in
	}
	if in.UpgradeInstancesFollowCluster != nil {
		in, out := &in.UpgradeInstancesFollowCluster, &out.UpgradeInstancesFollowCluster
		*out = new(bool)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VpcIdRefs != nil {
		in, out := &in.VpcIdRefs, &out.VpcIdRefs
		*out = new(v1.Reference)
		**out = **in
	}
	if in.VpcIdSelector != nil {
		in, out := &in.VpcIdSelector, &out.VpcIdSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]WorkerConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterParameters.
func (in *ClusterParameters) DeepCopy() *ClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterSpec) DeepCopyInto(out *ClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterSpec.
func (in *ClusterSpec) DeepCopy() *ClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterStatus) DeepCopyInto(out *ClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterStatus.
func (in *ClusterStatus) DeepCopy() *ClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDiskObservation) DeepCopyInto(out *DataDiskObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDiskObservation.
func (in *DataDiskObservation) DeepCopy() *DataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(DataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDiskParameters) DeepCopyInto(out *DataDiskParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDiskParameters.
func (in *DataDiskParameters) DeepCopy() *DataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(DataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventPersistenceObservation) DeepCopyInto(out *EventPersistenceObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventPersistenceObservation.
func (in *EventPersistenceObservation) DeepCopy() *EventPersistenceObservation {
	if in == nil {
		return nil
	}
	out := new(EventPersistenceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventPersistenceParameters) DeepCopyInto(out *EventPersistenceParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.LogSetID != nil {
		in, out := &in.LogSetID, &out.LogSetID
		*out = new(string)
		**out = **in
	}
	if in.TopicID != nil {
		in, out := &in.TopicID, &out.TopicID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventPersistenceParameters.
func (in *EventPersistenceParameters) DeepCopy() *EventPersistenceParameters {
	if in == nil {
		return nil
	}
	out := new(EventPersistenceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExistInstanceObservation) DeepCopyInto(out *ExistInstanceObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExistInstanceObservation.
func (in *ExistInstanceObservation) DeepCopy() *ExistInstanceObservation {
	if in == nil {
		return nil
	}
	out := new(ExistInstanceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExistInstanceParameters) DeepCopyInto(out *ExistInstanceParameters) {
	*out = *in
	if in.DesiredPodNumbers != nil {
		in, out := &in.DesiredPodNumbers, &out.DesiredPodNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.InstancesPara != nil {
		in, out := &in.InstancesPara, &out.InstancesPara
		*out = make([]InstancesParaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeRole != nil {
		in, out := &in.NodeRole, &out.NodeRole
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExistInstanceParameters.
func (in *ExistInstanceParameters) DeepCopy() *ExistInstanceParameters {
	if in == nil {
		return nil
	}
	out := new(ExistInstanceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionAddonObservation) DeepCopyInto(out *ExtensionAddonObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionAddonObservation.
func (in *ExtensionAddonObservation) DeepCopy() *ExtensionAddonObservation {
	if in == nil {
		return nil
	}
	out := new(ExtensionAddonObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionAddonParameters) DeepCopyInto(out *ExtensionAddonParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Param != nil {
		in, out := &in.Param, &out.Param
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionAddonParameters.
func (in *ExtensionAddonParameters) DeepCopy() *ExtensionAddonParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionAddonParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstancesParaObservation) DeepCopyInto(out *InstancesParaObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstancesParaObservation.
func (in *InstancesParaObservation) DeepCopy() *InstancesParaObservation {
	if in == nil {
		return nil
	}
	out := new(InstancesParaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstancesParaParameters) DeepCopyInto(out *InstancesParaParameters) {
	*out = *in
	if in.InstanceIds != nil {
		in, out := &in.InstanceIds, &out.InstanceIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstancesParaParameters.
func (in *InstancesParaParameters) DeepCopy() *InstancesParaParameters {
	if in == nil {
		return nil
	}
	out := new(InstancesParaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogAgentObservation) DeepCopyInto(out *LogAgentObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogAgentObservation.
func (in *LogAgentObservation) DeepCopy() *LogAgentObservation {
	if in == nil {
		return nil
	}
	out := new(LogAgentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogAgentParameters) DeepCopyInto(out *LogAgentParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.KubeletRootDir != nil {
		in, out := &in.KubeletRootDir, &out.KubeletRootDir
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogAgentParameters.
func (in *LogAgentParameters) DeepCopy() *LogAgentParameters {
	if in == nil {
		return nil
	}
	out := new(LogAgentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterConfigObservation) DeepCopyInto(out *MasterConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterConfigObservation.
func (in *MasterConfigObservation) DeepCopy() *MasterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(MasterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterConfigParameters) DeepCopyInto(out *MasterConfigParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]DataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterConfigParameters.
func (in *MasterConfigParameters) DeepCopy() *MasterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(MasterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolGlobalConfigObservation) DeepCopyInto(out *NodePoolGlobalConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolGlobalConfigObservation.
func (in *NodePoolGlobalConfigObservation) DeepCopy() *NodePoolGlobalConfigObservation {
	if in == nil {
		return nil
	}
	out := new(NodePoolGlobalConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodePoolGlobalConfigParameters) DeepCopyInto(out *NodePoolGlobalConfigParameters) {
	*out = *in
	if in.Expander != nil {
		in, out := &in.Expander, &out.Expander
		*out = new(string)
		**out = **in
	}
	if in.IgnoreDaemonSetsUtilization != nil {
		in, out := &in.IgnoreDaemonSetsUtilization, &out.IgnoreDaemonSetsUtilization
		*out = new(bool)
		**out = **in
	}
	if in.IsScaleInEnabled != nil {
		in, out := &in.IsScaleInEnabled, &out.IsScaleInEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxConcurrentScaleIn != nil {
		in, out := &in.MaxConcurrentScaleIn, &out.MaxConcurrentScaleIn
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInDelay != nil {
		in, out := &in.ScaleInDelay, &out.ScaleInDelay
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInUnneededTime != nil {
		in, out := &in.ScaleInUnneededTime, &out.ScaleInUnneededTime
		*out = new(float64)
		**out = **in
	}
	if in.ScaleInUtilizationThreshold != nil {
		in, out := &in.ScaleInUtilizationThreshold, &out.ScaleInUtilizationThreshold
		*out = new(float64)
		**out = **in
	}
	if in.SkipNodesWithLocalStorage != nil {
		in, out := &in.SkipNodesWithLocalStorage, &out.SkipNodesWithLocalStorage
		*out = new(bool)
		**out = **in
	}
	if in.SkipNodesWithSystemPods != nil {
		in, out := &in.SkipNodesWithSystemPods, &out.SkipNodesWithSystemPods
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodePoolGlobalConfigParameters.
func (in *NodePoolGlobalConfigParameters) DeepCopy() *NodePoolGlobalConfigParameters {
	if in == nil {
		return nil
	}
	out := new(NodePoolGlobalConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigDataDiskObservation) DeepCopyInto(out *WorkerConfigDataDiskObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigDataDiskObservation.
func (in *WorkerConfigDataDiskObservation) DeepCopy() *WorkerConfigDataDiskObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigDataDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigDataDiskParameters) DeepCopyInto(out *WorkerConfigDataDiskParameters) {
	*out = *in
	if in.AutoFormatAndMount != nil {
		in, out := &in.AutoFormatAndMount, &out.AutoFormatAndMount
		*out = new(bool)
		**out = **in
	}
	if in.DiskPartition != nil {
		in, out := &in.DiskPartition, &out.DiskPartition
		*out = new(string)
		**out = **in
	}
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskType != nil {
		in, out := &in.DiskType, &out.DiskType
		*out = new(string)
		**out = **in
	}
	if in.Encrypt != nil {
		in, out := &in.Encrypt, &out.Encrypt
		*out = new(bool)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigDataDiskParameters.
func (in *WorkerConfigDataDiskParameters) DeepCopy() *WorkerConfigDataDiskParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigDataDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigObservation) DeepCopyInto(out *WorkerConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigObservation.
func (in *WorkerConfigObservation) DeepCopy() *WorkerConfigObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigParameters) DeepCopyInto(out *WorkerConfigParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.BandwidthPackageID != nil {
		in, out := &in.BandwidthPackageID, &out.BandwidthPackageID
		*out = new(string)
		**out = **in
	}
	if in.CamRoleName != nil {
		in, out := &in.CamRoleName, &out.CamRoleName
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(float64)
		**out = **in
	}
	if in.DataDisk != nil {
		in, out := &in.DataDisk, &out.DataDisk
		*out = make([]WorkerConfigDataDiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DesiredPodNum != nil {
		in, out := &in.DesiredPodNum, &out.DesiredPodNum
		*out = new(float64)
		**out = **in
	}
	if in.DisasterRecoverGroupIds != nil {
		in, out := &in.DisasterRecoverGroupIds, &out.DisasterRecoverGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EnhancedMonitorService != nil {
		in, out := &in.EnhancedMonitorService, &out.EnhancedMonitorService
		*out = new(bool)
		**out = **in
	}
	if in.EnhancedSecurityService != nil {
		in, out := &in.EnhancedSecurityService, &out.EnhancedSecurityService
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.ImgID != nil {
		in, out := &in.ImgID, &out.ImgID
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidPeriod != nil {
		in, out := &in.InstanceChargeTypePrepaidPeriod, &out.InstanceChargeTypePrepaidPeriod
		*out = new(float64)
		**out = **in
	}
	if in.InstanceChargeTypePrepaidRenewFlag != nil {
		in, out := &in.InstanceChargeTypePrepaidRenewFlag, &out.InstanceChargeTypePrepaidRenewFlag
		*out = new(string)
		**out = **in
	}
	if in.InstanceName != nil {
		in, out := &in.InstanceName, &out.InstanceName
		*out = new(string)
		**out = **in
	}
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KeyIds != nil {
		in, out := &in.KeyIds, &out.KeyIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PublicIPAssigned != nil {
		in, out := &in.PublicIPAssigned, &out.PublicIPAssigned
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIdRefs != nil {
		in, out := &in.SubnetIdRefs, &out.SubnetIdRefs
		*out = new(v1.Reference)
		**out = **in
	}
	if in.SubnetIdSelector != nil {
		in, out := &in.SubnetIdSelector, &out.SubnetIdSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigParameters.
func (in *WorkerConfigParameters) DeepCopy() *WorkerConfigParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerInstancesListObservation) DeepCopyInto(out *WorkerInstancesListObservation) {
	*out = *in
	if in.FailedReason != nil {
		in, out := &in.FailedReason, &out.FailedReason
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceRole != nil {
		in, out := &in.InstanceRole, &out.InstanceRole
		*out = new(string)
		**out = **in
	}
	if in.InstanceState != nil {
		in, out := &in.InstanceState, &out.InstanceState
		*out = new(string)
		**out = **in
	}
	if in.LanIP != nil {
		in, out := &in.LanIP, &out.LanIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerInstancesListObservation.
func (in *WorkerInstancesListObservation) DeepCopy() *WorkerInstancesListObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerInstancesListObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerInstancesListParameters) DeepCopyInto(out *WorkerInstancesListParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerInstancesListParameters.
func (in *WorkerInstancesListParameters) DeepCopy() *WorkerInstancesListParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerInstancesListParameters)
	in.DeepCopyInto(out)
	return out
}
