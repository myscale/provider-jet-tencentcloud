/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TableEntryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TableEntryParameters struct {

	// Description of the routing table entry.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Destination address block.
	// +kubebuilder:validation:Required
	DestinationCidrBlock *string `json:"destinationCidrBlock" tf:"destination_cidr_block,omitempty"`

	// Whether the entry is disabled, default is `false`.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// ID of next-hop gateway. Note: when `next_type` is EIP, GatewayId should be `0`.
	// +kubebuilder:validation:Required
	NextHub *string `json:"nextHub" tf:"next_hub,omitempty"`

	// Type of next-hop. Valid values: `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `SSLVPN`, `NAT`, `NORMAL_CVM`, `EIP` and `CCN`.
	// +kubebuilder:validation:Required
	NextType *string `json:"nextType" tf:"next_type,omitempty"`

	// ID of routing table to which this entry belongs.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-tencentcloud/apis/routetable/v1alpha1.RouteTable
	// +crossplane:generate:reference:refFieldName=RouteTableIdRefs
	// +crossplane:generate:reference:selectorFieldName=RouteTableIdSelector
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// +kubebuilder:validation:Optional
	RouteTableIdRefs *v1.Reference `json:"routeTableIdRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RouteTableIdSelector *v1.Selector `json:"routeTableIdSelector,omitempty" tf:"-"`
}

// TableEntrySpec defines the desired state of TableEntry
type TableEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TableEntryParameters `json:"forProvider"`
}

// TableEntryStatus defines the observed state of TableEntry.
type TableEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TableEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TableEntry is the Schema for the TableEntrys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloudjet}
type TableEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TableEntrySpec   `json:"spec"`
	Status            TableEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TableEntryList contains a list of TableEntrys
type TableEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TableEntry `json:"items"`
}

// Repository type metadata.
var (
	TableEntry_Kind             = "TableEntry"
	TableEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TableEntry_Kind}.String()
	TableEntry_KindAPIVersion   = TableEntry_Kind + "." + CRDGroupVersion.String()
	TableEntry_GroupVersionKind = CRDGroupVersion.WithKind(TableEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&TableEntry{}, &TableEntryList{})
}
